================================================================================
Functions
================================================================================
function() 1
function() {}
function(arg1, arg2) {
  arg2
}

function(x, y) return(y)

function(x, ...) f(...)

function(arg1, arg2 = 2) {}

--------------------------------------------------------------------------------

(program
  (function
    parameters: (parameters)
    body: (float))
  (function
    parameters: (parameters)
    body: ({))
  (function
    parameters: (parameters
      parameter: (parameter
        name: (identifier))
      (comma)
      parameter: (parameter
        name: (identifier)))
    body: ({
      body: (identifier)))
  (function
    parameters: (parameters
      parameter: (parameter
        name: (identifier))
      (comma)
      parameter: (parameter
        name: (identifier)))
    body: (call
      (return)
      arguments: (arguments
        argument: (argument
          value: (identifier)))))
  (function
    parameters: (parameters
      parameter: (parameter
        name: (identifier))
      (comma)
      parameter: (parameter
        name: (dots)))
    body: (call
      (identifier)
      arguments: (arguments
        argument: (argument
          value: (dots)))))
  (function
    parameters: (parameters
      parameter: (parameter
        name: (identifier))
      (comma)
      parameter: (parameter
        name: (identifier)
        default: (float)))
    body: ({)))

================================================================================
Lambda Function
================================================================================

a <- \(arg) arg
b <- \(arg1, arg2) paste0(arg1, arg2)
c <- \(fun, ...) fun(...)
1:3 |> {\(x, y = 1) x + y}() |> {\(x) sum(x)}()
{\(a = 1) a + 1}()
\() 1 + 2
--------------------------------------------------------------------------------

(program
  (<-
    lhs: (identifier)
    rhs: (function
      parameters: (parameters
        parameter: (parameter
          name: (identifier)))
      body: (identifier)))
  (<-
    lhs: (identifier)
    rhs: (function
      parameters: (parameters
        parameter: (parameter
          name: (identifier))
        (comma)
        parameter: (parameter
          name: (identifier)))
      body: (call
        (identifier)
        arguments: (arguments
          argument: (argument
            value: (identifier))
          (comma)
          argument: (argument
            value: (identifier))))))
  (<-
    lhs: (identifier)
    rhs: (function
      parameters: (parameters
        parameter: (parameter
          name: (identifier))
        (comma)
        parameter: (parameter
          name: (dots)))
      body: (call
        (identifier)
        arguments: (arguments
          argument: (argument
            value: (dots))))))
  (|>
    lhs: (|>
      lhs: (:
        lhs: (float)
        rhs: (float))
      rhs: (call
        ({
          body: (function
            parameters: (parameters
              parameter: (parameter
                name: (identifier))
              (comma)
              parameter: (parameter
                name: (identifier)
                default: (float)))
            body: (+
              lhs: (identifier)
              rhs: (identifier))))
        arguments: (arguments)))
    rhs: (call
      ({
        body: (function
          parameters: (parameters
            parameter: (parameter
              name: (identifier)))
          body: (call
            (identifier)
            arguments: (arguments
              argument: (argument
                value: (identifier))))))
      arguments: (arguments)))
  (call
    ({
      body: (function
        parameters: (parameters
          parameter: (parameter
            name: (identifier)
            default: (float)))
        body: (+
          lhs: (identifier)
          rhs: (float))))
    arguments: (arguments))
  (function
    parameters: (parameters)
    body: (+
      lhs: (float)
      rhs: (float))))

================================================================================
Relational
================================================================================

a == b

--------------------------------------------------------------------------------

(program
  (==
    (identifier)
    (identifier)))

================================================================================
Additive
================================================================================

a + b

--------------------------------------------------------------------------------

(program
  (+
    (identifier)
    (identifier)))

================================================================================
Multiplicative
================================================================================

a * b

--------------------------------------------------------------------------------

(program
  (*
    (identifier)
    (identifier)))

================================================================================
Binary operations
================================================================================

2+2*2

--------------------------------------------------------------------------------

(program
  (+
    (float)
    (*
      (float)
      (float))))

================================================================================
Unary minus
================================================================================

-a
foo(-a, bar)

--------------------------------------------------------------------------------

(program
  (-
    operand: (identifier))
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        value: (-
          operand: (identifier)))
      (comma)
      argument: (argument
        value: (identifier)))))

================================================================================
Binary minus
================================================================================

foo-a

--------------------------------------------------------------------------------

(program
  (-
    (identifier)
    (identifier)))

================================================================================
Operator precedence
================================================================================

a <= b && c >= d
a[1] <- foo || bar
a && b(c) && d
val <- foo %>% bar(1) %>% baz()

--------------------------------------------------------------------------------

(program
  (&&
    lhs: (<=
      lhs: (identifier)
      rhs: (identifier))
    rhs: (>=
      lhs: (identifier)
      rhs: (identifier)))
  (<-
    lhs: ([
      (identifier)
      arguments: (arguments
        argument: (argument
          value: (float))))
    rhs: (||
      lhs: (identifier)
      rhs: (identifier)))
  (&&
    lhs: (&&
      lhs: (identifier)
      rhs: (call
        (identifier)
        arguments: (arguments
          argument: (argument
            value: (identifier)))))
    rhs: (identifier))
  (<-
    lhs: (identifier)
    rhs: (%>%
      lhs: (%>%
        lhs: (identifier)
        rhs: (call
          (identifier)
          arguments: (arguments
            argument: (argument
              value: (float)))))
      rhs: (call
        (identifier)
        arguments: (arguments)))))

================================================================================
Specials
================================================================================

x %% y
x %+% y
x %>% y
x %some text% y

--------------------------------------------------------------------------------

(program
  (%%
    (identifier)
    (identifier))
  (%%
    (identifier)
    (identifier))
  (%>%
    (identifier)
    (identifier))
  (%%
    (identifier)
    (identifier)))

================================================================================
Pipe
================================================================================

x |> print()

x |> foo() |> bar() + baz()

x |> {function(x) x}()

--------------------------------------------------------------------------------

(program
  (|>
    lhs: (identifier)
    rhs: (call
      (identifier)
      arguments: (arguments)))
  (|>
    lhs: (|>
      lhs: (identifier)
      rhs: (call
        (identifier)
        arguments: (arguments)))
    rhs: (+
      lhs: (call
        (identifier)
        arguments: (arguments))
      rhs: (call
        (identifier)
        arguments: (arguments))))
  (|>
    lhs: (identifier)
    rhs: (call
      ({
        body: (function
          parameters: (parameters
            parameter: (parameter
              name: (identifier)))
          body: (identifier)))
      arguments: (arguments))))

================================================================================
Pipe Placeholder
================================================================================

foo |> bar(x, y = _)
foo |> bar() |> baz(data = _)

--------------------------------------------------------------------------------

(program
  (|>
    lhs: (identifier)
    rhs: (call
      (identifier)
      arguments: (arguments
        argument: (argument
          value: (identifier))
        (comma)
        argument: (argument
          name: (identifier)
          value: (identifier)))))
  (|>
    lhs: (|>
      lhs: (identifier)
      rhs: (call
        (identifier)
        arguments: (arguments)))
    rhs: (call
      (identifier)
      arguments: (arguments
        argument: (argument
          name: (identifier)
          value: (identifier))))))

================================================================================
Subset
================================================================================

foo[bar]
foo[1, 2]
foo[1, ]
foo[]

--------------------------------------------------------------------------------

(program
  ([
    (identifier)
    (arguments
      (argument
        (identifier))))
  ([
    (identifier)
    (arguments
      (argument
        (float))
      (comma)
      (argument
        (float))))
  ([
    (identifier)
    (arguments
      (argument
        (float))
      (comma)))
  ([
    (identifier)
    (arguments)))

================================================================================
Subset2
================================================================================

foo[[x]]
foo[[x, y]]
foo[[]]

--------------------------------------------------------------------------------

(program
  ([[
    (identifier)
    (arguments
      (argument
        (identifier))))
  ([[
    (identifier)
    (arguments
      (argument
        (identifier))
      (comma)
      (argument
        (identifier))))
  ([[
    (identifier)
    (arguments)))

================================================================================
If
================================================================================

if (x)
  log(y)

if (a.b) {
  log(c)
  d
}

--------------------------------------------------------------------------------

(program
  (if
    condition: (identifier)
    consequence: (call
      (identifier)
      arguments: (arguments
        argument: (argument
          value: (identifier)))))
  (if
    condition: (identifier)
    consequence: ({
      body: (call
        (identifier)
        arguments: (arguments
          argument: (argument
            value: (identifier))))
      body: (identifier))))

================================================================================
If-else
================================================================================

if (x)
  y else if (a)
  b

if (x)
  y else if (a)
  b else d

if (a) {
  c
  d
} else {
  e
}

--------------------------------------------------------------------------------

(program
  (if
    condition: (identifier)
    consequence: (identifier)
    alternative: (if
      condition: (identifier)
      consequence: (identifier)))
  (if
    condition: (identifier)
    consequence: (identifier)
    alternative: (if
      condition: (identifier)
      consequence: (identifier)
      alternative: (identifier)))
  (if
    condition: (identifier)
    consequence: ({
      body: (identifier)
      body: (identifier))
    alternative: ({
      body: (identifier))))

================================================================================
Complex If Expression
================================================================================

# Invalid at top level due to newline before `else`, so not a real if statement
if (TRUE) {
  1
}
else {
  2
}

# Invalid for same reason as above
if (TRUE)
  1
else
  2

# Valid inside `{` only due to special `else` handling with newlines
{
  if (TRUE) {
    1
  }
  else {
    2
  }
}

# Valid with comments in special newline territory
{
  if (TRUE) {
    1
  }
  # hi there
  
  # another one!

  else {
    2
  }
}

--------------------------------------------------------------------------------

(program
  (comment)
  (if
    (TRUE)
    ({
      (float)))
  (identifier)
  ({
    (float))
  (comment)
  (if
    (TRUE)
    (float))
  (identifier)
  (float)
  (comment)
  ({
    (if
      (TRUE)
      ({
        (float))
      ({
        (float))))
  (comment)
  ({
    (if
      (TRUE)
      ({
        (float))
      (comment)
      (comment)
      ({
        (float)))))

================================================================================
for
================================================================================

for (x in y)
  f

--------------------------------------------------------------------------------

(program
  (for
    variable: (identifier)
    sequence: (identifier)
    body: (identifier)))

================================================================================
While
================================================================================
while(TRUE)
  bar

while(x > 0)
  x <- x - 1

while(TRUE)
  break

while(TRUE)
  next

--------------------------------------------------------------------------------

(program
  (while
    condition: (TRUE)
    body: (identifier))
  (while
    condition: (>
      lhs: (identifier)
      rhs: (float))
    body: (<-
      lhs: (identifier)
      rhs: (-
        lhs: (identifier)
        rhs: (float))))
  (while
    condition: (TRUE)
    body: (break))
  (while
    condition: (TRUE)
    body: (next)))

================================================================================
Repeat
================================================================================

repeat 1

--------------------------------------------------------------------------------

(program
  (repeat
    body: (float)))

================================================================================
Switch
================================================================================

switch(foo,
  x = 1,
  "y" = 2,
  z = ,
  3
)

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))
      (comma)
      argument: (argument
        name: (identifier)
        value: (float))
      (comma)
      argument: (argument
        name: (string)
        value: (float))
      (comma)
      argument: (argument
        name: (identifier))
      (comma)
      argument: (argument
        value: (float)))))

================================================================================
Dollar
================================================================================

foo$bar

foo$"bar"

--------------------------------------------------------------------------------

(program
  ($
    (identifier)
    (identifier))
  ($
    (identifier)
    (string)))

================================================================================
Slot
================================================================================

foo@bar

--------------------------------------------------------------------------------

(program
  (@
    (identifier)
    (identifier)))

================================================================================
Namespace get
================================================================================

foo::
foo::bar
foo::bar(1)

--------------------------------------------------------------------------------

(program
  (::
    lhs: (::
      lhs: (identifier)
      rhs: (identifier))
    rhs: (identifier))
  (call
    (::
      lhs: (identifier)
      rhs: (identifier))
    arguments: (arguments
      argument: (argument
        value: (float)))))

================================================================================
Namespace get internal
================================================================================

foo:::bar
foo:::bar(1)

--------------------------------------------------------------------------------

(program
  (:::
    lhs: (identifier)
    rhs: (identifier))
  (call
    (:::
      lhs: (identifier)
      rhs: (identifier))
    arguments: (arguments
      argument: (argument
        value: (float)))))

================================================================================
Assignment
================================================================================

x <- 1
x = 1
x := 1
x <<- 1
1 ->> x
1 -> x
x <- y(1)
y(1) -> x

--------------------------------------------------------------------------------

(program
  (<-
    lhs: (identifier)
    rhs: (float))
  (=
    lhs: (identifier)
    rhs: (float))
  (:=
    lhs: (identifier)
    rhs: (float))
  (<<-
    lhs: (identifier)
    rhs: (float))
  (->>
    lhs: (float)
    rhs: (identifier))
  (->
    lhs: (float)
    rhs: (identifier))
  (<-
    lhs: (identifier)
    rhs: (call
      (identifier)
      arguments: (arguments
        argument: (argument
          value: (float)))))
  (->
    lhs: (call
      (identifier)
      arguments: (arguments
        argument: (argument
          value: (float))))
    rhs: (identifier)))

================================================================================
Calls
================================================================================

f()
f(x)
f(1+1)
f(1 ~ 1)
f(x, )
f(x, y)
f(x, y = 2)
f(x = 1 + 1)
f(x, y =)
f(f2(x, y))
f(,)
f(x,)
f(,y)
f(x=,)
f("x"=,)
f(... = ,)
f(,y=)

--------------------------------------------------------------------------------

(program
  (call
    (identifier)
    arguments: (arguments))
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))))
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        value: (+
          lhs: (float)
          rhs: (float)))))
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        value: (~
          lhs: (float)
          rhs: (float)))))
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))
      (comma)))
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))
      (comma)
      argument: (argument
        value: (identifier))))
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))
      (comma)
      argument: (argument
        name: (identifier)
        value: (float))))
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        name: (identifier)
        value: (+
          lhs: (float)
          rhs: (float)))))
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))
      (comma)
      argument: (argument
        name: (identifier))))
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        value: (call
          (identifier)
          arguments: (arguments
            argument: (argument
              value: (identifier))
            (comma)
            argument: (argument
              value: (identifier)))))))
  (call
    (identifier)
    arguments: (arguments
      (comma)))
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))
      (comma)))
  (call
    (identifier)
    arguments: (arguments
      (comma)
      argument: (argument
        value: (identifier))))
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        name: (identifier))
      (comma)))
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        name: (string))
      (comma)))
  (call
    (identifier)
    arguments: (arguments
      argument: (argument
        name: (dots))
      (comma)))
  (call
    (identifier)
    arguments: (arguments
      (comma)
      argument: (argument
        name: (identifier)))))

================================================================================
Braces
================================================================================

{}

{1}

{1; 2}

{1;
2}

{1
2
}

{
1
2
}

--------------------------------------------------------------------------------

(program
  ({)
  ({
    (float))
  ({
    (float)
    (float))
  ({
    (float)
    (float))
  ({
    (float)
    (float))
  ({
    (float)
    (float)))

================================================================================
Colon
================================================================================

1:2
(1 + 1):-5

--------------------------------------------------------------------------------

(program
  (:
    (float)
    (float))
  (:
    ((
      (+
        (float)
        (float)))
    (-
      (float))))

================================================================================
Formulas
================================================================================

~x
y~x

--------------------------------------------------------------------------------

(program
  (~
    (identifier))
  (~
    (identifier)
    (identifier)))

================================================================================
Help Operator
================================================================================
a ? b
a ? b <- 1

--------------------------------------------------------------------------------

(program
  (?
    (identifier)
    (identifier))
  (?
    (identifier)
    (<-
      (identifier)
      (float))))

================================================================================
Complex Expressions
================================================================================
repeat if (1) TRUE else repeat 42
if (TRUE) if (FALSE) 2 else NULL
a::b$c[[d]] <- e
TRUE ~ FALSE ~ NULL ? NA ? NaN
if (TRUE) FALSE
else NA
(if (TRUE) FALSE
else NA)
a = TRUE ? FALSE
TRUE <- FALSE = NA
TRUE <- FALSE ? NA
TRUE = FALSE ? NA
TRUE ? FALSE = NA

--------------------------------------------------------------------------------

(program
  (repeat
    (if
      (float)
      (TRUE)
      (repeat
        (float))))
  (if
    (TRUE)
    (if
      (FALSE)
      (float)
      (NULL)))
  (<-
    ([[
      ($
        (::
          (identifier)
          (identifier))
        (identifier))
      (arguments
        (argument
          (identifier))))
    (identifier))
  (?
    (?
      (~
        (~
          (TRUE)
          (FALSE))
        (NULL))
      (NA))
    (NaN))
  (if
    (TRUE)
    (FALSE))
  (identifier)
  (NA)
  ((
    (if
      (TRUE)
      (FALSE)
      (NA)))
  (?
    (=
      (identifier)
      (TRUE))
    (FALSE))
  (<-
    (TRUE)
    (=
      (FALSE)
      (NA)))
  (?
    (<-
      (TRUE)
      (FALSE))
    (NA))
  (?
    (=
      (TRUE)
      (FALSE))
    (NA))
  (?
    (TRUE)
    (=
      (FALSE)
      (NA))))

================================================================================
Precedence Tests
================================================================================
A$"B"^NA
a::b$c
a$b?c

--------------------------------------------------------------------------------

(program
  (^
    ($
      (identifier)
      (string))
    (NA))
  ($
    (::
      (identifier)
      (identifier))
    (identifier))
  (?
    ($
      (identifier)
      (identifier))
    (identifier)))

================================================================================
Newlines
================================================================================

apple
(banana)

{
  apple
  (banana)
}

(
  apple
  (banana)
)

--------------------------------------------------------------------------------

(program
  (identifier)
  ((
    (identifier))
  ({
    (identifier)
    ((
      (identifier)))
  ((
    (call
      (identifier)
      (arguments
        (argument
          (identifier))))))
