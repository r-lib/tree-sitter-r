================================================================================
Functions
================================================================================
function() 1
function() {}
function(arg1, arg2) {
  arg2
}

function(x, y) return(y)

function(x, ...) f(...)

function(arg1, arg2 = 2) {}

function(x,
         y,
         z = 3) {

}

function()


  1

function() function() {}

function(x = function() {}) {}

# With missing RHS in inner function
function(x = function()) {}

# With no intermediate `{` scope
function() for(i in 1:5) i

--------------------------------------------------------------------------------

(program
  (function_definition
    parameters: (parameters)
    body: (float))
  (function_definition
    parameters: (parameters)
    body: (braces))
  (function_definition
    parameters: (parameters
      parameter: (parameter
        name: (identifier))
      (comma)
      parameter: (parameter
        name: (identifier)))
    body: (braces
      body: (identifier)))
  (function_definition
    parameters: (parameters
      parameter: (parameter
        name: (identifier))
      (comma)
      parameter: (parameter
        name: (identifier)))
    body: (call
      function: (return)
      arguments: (arguments
        argument: (argument
          value: (identifier)))))
  (function_definition
    parameters: (parameters
      parameter: (parameter
        name: (identifier))
      (comma)
      parameter: (parameter
        name: (dots)))
    body: (call
      function: (identifier)
      arguments: (arguments
        argument: (argument
          value: (dots)))))
  (function_definition
    parameters: (parameters
      parameter: (parameter
        name: (identifier))
      (comma)
      parameter: (parameter
        name: (identifier)
        default: (float)))
    body: (braces))
  (function_definition
    parameters: (parameters
      parameter: (parameter
        name: (identifier))
      (comma)
      parameter: (parameter
        name: (identifier))
      (comma)
      parameter: (parameter
        name: (identifier)
        default: (float)))
    body: (braces))
  (function_definition
    parameters: (parameters)
    body: (float))
  (function_definition
    parameters: (parameters)
    body: (function_definition
      parameters: (parameters)
      body: (braces)))
  (function_definition
    parameters: (parameters
      parameter: (parameter
        name: (identifier)
        default: (function_definition
          parameters: (parameters)
          body: (braces))))
    body: (braces))
  (comment)
  (function_definition
    parameters: (parameters
      parameter: (parameter
        name: (identifier)
        default: (function_definition
          parameters: (parameters))))
    body: (braces))
  (comment)
  (function_definition
    parameters: (parameters)
    body: (for_statement
      variable: (identifier)
      sequence: (colon
        lhs: (float)
        rhs: (float))
      body: (identifier))))

================================================================================
Function No Body
================================================================================

function(x, y)

--------------------------------------------------------------------------------

(program
  (function_definition
    parameters: (parameters
      parameter: (parameter
        name: (identifier))
      (comma)
      parameter: (parameter
        name: (identifier)))))

================================================================================
Function No Body With Assignment
================================================================================

x <- function(x, y)

--------------------------------------------------------------------------------

(program
  (left_assignment
    lhs: (identifier)
    rhs: (function_definition
      parameters: (parameters
        parameter: (parameter
          name: (identifier))
        (comma)
        parameter: (parameter
          name: (identifier))))))

================================================================================
Lambda Function
================================================================================

a <- \(arg) arg
b <- \(arg1, arg2) paste0(arg1, arg2)
c <- \(fun, ...) fun(...)
1:3 |> {\(x, y = 1) x + y}() |> {\(x) sum(x)}()
{\(a = 1) a + 1}()
\() 1 + 2
\()

  1 + 2
--------------------------------------------------------------------------------

(program
  (left_assignment
    (identifier)
    (function_definition
      (parameters
        (parameter
          (identifier)))
      (identifier)))
  (left_assignment
    (identifier)
    (function_definition
      (parameters
        (parameter
          (identifier))
        (comma)
        (parameter
          (identifier)))
      (call
        (identifier)
        (arguments
          (argument
            (identifier))
          (comma)
          (argument
            (identifier))))))
  (left_assignment
    (identifier)
    (function_definition
      (parameters
        (parameter
          (identifier))
        (comma)
        (parameter
          (dots)))
      (call
        (identifier)
        (arguments
          (argument
            (dots))))))
  (pipe
    (pipe
      (colon
        (float)
        (float))
      (call
        (braces
          (function_definition
            (parameters
              (parameter
                (identifier))
              (comma)
              (parameter
                (identifier)
                (float)))
            (arithmetic_operator
              (identifier)
              (identifier))))
        (arguments)))
    (call
      (braces
        (function_definition
          (parameters
            (parameter
              (identifier)))
          (call
            (identifier)
            (arguments
              (argument
                (identifier))))))
      (arguments)))
  (call
    (braces
      (function_definition
        (parameters
          (parameter
            (identifier)
            (float)))
        (arithmetic_operator
          (identifier)
          (float))))
    (arguments))
  (function_definition
    (parameters)
    (arithmetic_operator
      (float)
      (float)))
  (function_definition
    (parameters)
    (arithmetic_operator
      (float)
      (float))))

================================================================================
Relational
================================================================================

a == b
a > b
a < b
a >= b
a <= b
a != b

a ==
  b

--------------------------------------------------------------------------------

(program
  (comparison_operator
    (identifier)
    (identifier))
  (comparison_operator
    (identifier)
    (identifier))
  (comparison_operator
    (identifier)
    (identifier))
  (comparison_operator
    (identifier)
    (identifier))
  (comparison_operator
    (identifier)
    (identifier))
  (comparison_operator
    (identifier)
    (identifier))
  (comparison_operator
    (identifier)
    (identifier)))

================================================================================
Arithmetic Operator
================================================================================

a + b
a - b
a * b
a / b
a ^ b
a ** b

a +
  b

a *
  b

--------------------------------------------------------------------------------

(program
  (arithmetic_operator
    (identifier)
    (identifier))
  (arithmetic_operator
    (identifier)
    (identifier))
  (arithmetic_operator
    (identifier)
    (identifier))
  (arithmetic_operator
    (identifier)
    (identifier))
  (arithmetic_operator
    (identifier)
    (identifier))
  (arithmetic_operator
    (identifier)
    (identifier))
  (arithmetic_operator
    (identifier)
    (identifier))
  (arithmetic_operator
    (identifier)
    (identifier)))

================================================================================
Unary Operators
================================================================================

!a
+a
-a
foo(!a, +b)
foo(-a, bar)

!
  a
-  b

--------------------------------------------------------------------------------

(program
  (unary_operator
    (identifier))
  (unary_operator
    (identifier))
  (unary_operator
    (identifier))
  (call
    (identifier)
    (arguments
      (argument
        (unary_operator
          (identifier)))
      (comma)
      (argument
        (unary_operator
          (identifier)))))
  (call
    (identifier)
    (arguments
      (argument
        (unary_operator
          (identifier)))
      (comma)
      (argument
        (identifier))))
  (unary_operator
    (identifier))
  (unary_operator
    (identifier)))

================================================================================
Operator precedence
================================================================================

2+a*2
2+a+2
!a + !b
a <= 2 && 2 >= d
a[1] <- foo || bar
a && b(c) && d
val <- foo %>% bar(1) %>% baz()

--------------------------------------------------------------------------------

(program
  (arithmetic_operator
    (float)
    (arithmetic_operator
      (identifier)
      (float)))
  (arithmetic_operator
    (arithmetic_operator
      (float)
      (identifier))
    (float))
  (unary_operator
    (arithmetic_operator
      (identifier)
      (unary_operator
        (identifier))))
  (logical_scalar_operator
    (comparison_operator
      (identifier)
      (float))
    (comparison_operator
      (float)
      (identifier)))
  (left_assignment
    (subset
      (identifier)
      (arguments
        (argument
          (float))))
    (logical_scalar_operator
      (identifier)
      (identifier)))
  (logical_scalar_operator
    (logical_scalar_operator
      (identifier)
      (call
        (identifier)
        (arguments
          (argument
            (identifier)))))
    (identifier))
  (left_assignment
    (identifier)
    (special
      (special
        (identifier)
        (call
          (identifier)
          (arguments
            (argument
              (float)))))
      (call
        (identifier)
        (arguments)))))

================================================================================
Specials
================================================================================

x %% y
x %/% y
x %+% y
x %>% y
x %>% 2 %>% z
x %some text% y
x %//% y

# Not specials, but hard to test errors `%\%`, `%%%`

--------------------------------------------------------------------------------

(program
  (special
    (identifier)
    (identifier))
  (special
    (identifier)
    (identifier))
  (special
    (identifier)
    (identifier))
  (special
    (identifier)
    (identifier))
  (special
    (special
      (identifier)
      (float))
    (identifier))
  (special
    (identifier)
    (identifier))
  (special
    (identifier)
    (identifier))
  (comment))

================================================================================
Pipe
================================================================================

x |> print()

x |> foo() %>% bar() |> baz()

x |> foo() |> bar() + baz()

x |> {function(x) x}()

--------------------------------------------------------------------------------

(program
  (pipe
    (identifier)
    (call
      (identifier)
      (arguments)))
  (pipe
    (special
      (pipe
        (identifier)
        (call
          (identifier)
          (arguments)))
      (call
        (identifier)
        (arguments)))
    (call
      (identifier)
      (arguments)))
  (arithmetic_operator
    (pipe
      (pipe
        (identifier)
        (call
          (identifier)
          (arguments)))
      (call
        (identifier)
        (arguments)))
    (call
      (identifier)
      (arguments)))
  (pipe
    (identifier)
    (call
      (braces
        (function_definition
          (parameters
            (parameter
              (identifier)))
          (identifier)))
      (arguments))))

================================================================================
Pipe Placeholder
================================================================================

foo |> bar(x, y = _)
foo |> bar() |> baz(data = _)

--------------------------------------------------------------------------------

(program
  (pipe
    (identifier)
    (call
      (identifier)
      (arguments
        (argument
          (identifier))
        (comma)
        (argument
          (identifier)
          (identifier)))))
  (pipe
    (pipe
      (identifier)
      (call
        (identifier)
        (arguments)))
    (call
      (identifier)
      (arguments
        (argument
          (identifier)
          (identifier))))))

================================================================================
Subset
================================================================================

foo[bar]
foo[1, 2]
foo[1, ]
foo[1,, ]
foo[1,,2]
foo[x=1,,y=3,4]
foo[]

--------------------------------------------------------------------------------

(program
  (subset
    (identifier)
    (arguments
      (argument
        (identifier))))
  (subset
    (identifier)
    (arguments
      (argument
        (float))
      (comma)
      (argument
        (float))))
  (subset
    (identifier)
    (arguments
      (argument
        (float))
      (comma)))
  (subset
    (identifier)
    (arguments
      (argument
        (float))
      (comma)
      (comma)))
  (subset
    (identifier)
    (arguments
      (argument
        (float))
      (comma)
      (comma)
      (argument
        (float))))
  (subset
    (identifier)
    (arguments
      (argument
        (identifier)
        (float))
      (comma)
      (comma)
      (argument
        (identifier)
        (float))
      (comma)
      (argument
        (float))))
  (subset
    (identifier)
    (arguments)))

================================================================================
Subset2
================================================================================

foo[[x]]
foo[[x, y]]
foo[[x,]]
foo[[x,,]]
foo[[x,,y]]
foo[[]]

--------------------------------------------------------------------------------

(program
  (subset2
    (identifier)
    (arguments
      (argument
        (identifier))))
  (subset2
    (identifier)
    (arguments
      (argument
        (identifier))
      (comma)
      (argument
        (identifier))))
  (subset2
    (identifier)
    (arguments
      (argument
        (identifier))
      (comma)))
  (subset2
    (identifier)
    (arguments
      (argument
        (identifier))
      (comma)
      (comma)))
  (subset2
    (identifier)
    (arguments
      (argument
        (identifier))
      (comma)
      (comma)
      (argument
        (identifier))))
  (subset2
    (identifier)
    (arguments)))

================================================================================
Subset and Subset2 Precedence
================================================================================

a[[b[1]]]
a[b[[1]]]

--------------------------------------------------------------------------------

(program
  (subset2
    (identifier)
    (arguments
      (argument
        (subset
          (identifier)
          (arguments
            (argument
              (float)))))))
  (subset
    (identifier)
    (arguments
      (argument
        (subset2
          (identifier)
          (arguments
            (argument
              (float))))))))

================================================================================
If
================================================================================

if (x)
  log(y)

if (a.b) {
  log(c)
  d
}

--------------------------------------------------------------------------------

(program
  (if_statement
    condition: (identifier)
    consequence: (call
      function: (identifier)
      arguments: (arguments
        argument: (argument
          value: (identifier)))))
  (if_statement
    condition: (identifier)
    consequence: (braces
      body: (call
        function: (identifier)
        arguments: (arguments
          argument: (argument
            value: (identifier))))
      body: (identifier))))

================================================================================
If-else
================================================================================

if (x)
  y else if (a)
  b

if (x)
  y else if (a)
  b else d

if (a) {
  c
  d
} else {
  e
}

--------------------------------------------------------------------------------

(program
  (if_statement
    condition: (identifier)
    consequence: (identifier)
    alternative: (if_statement
      condition: (identifier)
      consequence: (identifier)))
  (if_statement
    condition: (identifier)
    consequence: (identifier)
    alternative: (if_statement
      condition: (identifier)
      consequence: (identifier)
      alternative: (identifier)))
  (if_statement
    condition: (identifier)
    consequence: (braces
      body: (identifier)
      body: (identifier))
    alternative: (braces
      body: (identifier))))

================================================================================
Complex If Expression
================================================================================

# Invalid at top level due to newline before `else`, so not a real if statement
if (TRUE) {
  1
}
else {
  2
}

# Invalid for same reason as above
if (TRUE)
  1
else
  2

# Valid inside `{` only due to special `else` handling with newlines
{
  if (TRUE) {
    1
  }
  else {
    2
  }
}

# Valid with comments in special newline territory
{
  if (TRUE) {
    1
  }
  # hi there
  
  # another one!

  else {
    2
  }
}

--------------------------------------------------------------------------------

(program
  (comment)
  (if_statement
    (true)
    (braces
      (float)))
  (identifier)
  (braces
    (float))
  (comment)
  (if_statement
    (true)
    (float))
  (identifier)
  (float)
  (comment)
  (braces
    (if_statement
      (true)
      (braces
        (float))
      (braces
        (float))))
  (comment)
  (braces
    (if_statement
      (true)
      (braces
        (float))
      (comment)
      (comment)
      (braces
        (float)))))

================================================================================
For
================================================================================

for (x in y)
  f

for (x in 5:6) {
  for (y in ys) {
    z
  }
}

for (x in y) for (y in z) x + y

--------------------------------------------------------------------------------

(program
  (for_statement
    variable: (identifier)
    sequence: (identifier)
    body: (identifier))
  (for_statement
    variable: (identifier)
    sequence: (colon
      lhs: (float)
      rhs: (float))
    body: (braces
      body: (for_statement
        variable: (identifier)
        sequence: (identifier)
        body: (braces
          body: (identifier)))))
  (for_statement
    variable: (identifier)
    sequence: (identifier)
    body: (for_statement
      variable: (identifier)
      sequence: (identifier)
      body: (arithmetic_operator
        lhs: (identifier)
        rhs: (identifier)))))

================================================================================
For No Body
================================================================================

for (i in 1:5)

--------------------------------------------------------------------------------

(program
  (for_statement
    (identifier)
    (colon
      (float)
      (float))))

================================================================================
While
================================================================================
while(TRUE)
  bar

while(x > 0)
  x <- x - 1

while(TRUE)
  break

while(TRUE)
  next

--------------------------------------------------------------------------------

(program
  (while_statement
    condition: (true)
    body: (identifier))
  (while_statement
    condition: (comparison_operator
      lhs: (identifier)
      rhs: (float))
    body: (left_assignment
      lhs: (identifier)
      rhs: (arithmetic_operator
        lhs: (identifier)
        rhs: (float))))
  (while_statement
    condition: (true)
    body: (break))
  (while_statement
    condition: (true)
    body: (next)))

================================================================================
While No Body
================================================================================

while (a < b)

--------------------------------------------------------------------------------

(program
  (while_statement
    (comparison_operator
      (identifier)
      (identifier))))

================================================================================
Repeat
================================================================================

repeat 1

--------------------------------------------------------------------------------

(program
  (repeat_statement
    (float)))

================================================================================
Repeat No Body
================================================================================

repeat

--------------------------------------------------------------------------------

(program
  (repeat_statement))

================================================================================
Switch
================================================================================

switch(foo,
  x = 1,
  "y" = 2,
  z = ,
  3
)

--------------------------------------------------------------------------------

(program
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))
      (comma)
      argument: (argument
        name: (identifier)
        value: (float))
      (comma)
      argument: (argument
        name: (string)
        value: (float))
      (comma)
      argument: (argument
        name: (identifier))
      (comma)
      argument: (argument
        value: (float)))))

================================================================================
Dollar
================================================================================

foo$bar
foo$bar$baz
foo$bar@baz
foo$bar()
foo$"bar"
foo$bar()$baz[[1]]$bam

--------------------------------------------------------------------------------

(program
  (dollar
    lhs: (identifier)
    rhs: (identifier))
  (dollar
    lhs: (dollar
      lhs: (identifier)
      rhs: (identifier))
    rhs: (identifier))
  (at
    lhs: (dollar
      lhs: (identifier)
      rhs: (identifier))
    rhs: (identifier))
  (call
    function: (dollar
      lhs: (identifier)
      rhs: (identifier))
    arguments: (arguments))
  (dollar
    lhs: (identifier)
    rhs: (string))
  (dollar
    lhs: (subset2
      function: (dollar
        lhs: (call
          function: (dollar
            lhs: (identifier)
            rhs: (identifier))
          arguments: (arguments))
        rhs: (identifier))
      arguments: (arguments
        argument: (argument
          value: (float))))
    rhs: (identifier)))

================================================================================
Dollar No RHS
================================================================================
foo$

--------------------------------------------------------------------------------

(program
  (dollar
    lhs: (identifier)))

================================================================================
Slot
================================================================================

foo@bar
foo@bar$baz
foo@bar()
foo@"bar"

--------------------------------------------------------------------------------

(program
  (at
    (identifier)
    (identifier))
  (dollar
    (at
      (identifier)
      (identifier))
    (identifier))
  (call
    (at
      (identifier)
      (identifier))
    (arguments))
  (at
    (identifier)
    (string)))

================================================================================
Slot No RHS
================================================================================
foo@

--------------------------------------------------------------------------------

(program
  (at
    lhs: (identifier)))

================================================================================
Namespace get
================================================================================

foo::
foo::bar
foo::bar(1)

--------------------------------------------------------------------------------

(program
  (namespace
    lhs: (identifier))
  (namespace
    lhs: (identifier)
    rhs: (identifier))
  (call
    function: (namespace
      lhs: (identifier)
      rhs: (identifier))
    arguments: (arguments
      argument: (argument
        value: (float)))))

================================================================================
Namespace get internal
================================================================================

foo:::
foo:::bar
foo:::bar(1)

--------------------------------------------------------------------------------

(program
  (namespace_internal
    lhs: (identifier))
  (namespace_internal
    lhs: (identifier)
    rhs: (identifier))
  (call
    function: (namespace_internal
      lhs: (identifier)
      rhs: (identifier))
    arguments: (arguments
      argument: (argument
        value: (float)))))

================================================================================
Dollar, At, Namespace, Namespace Internal With Expression RHS
================================================================================
# These nodes allows an optional RHS, and the RHS must be a string/identifier,
# so we nicely get a true node here alongside the braces. Even if that's not
# parsable R code, it's useful for completions and highlighting.
foo${bar}
foo@{bar}
foo::{bar}
foo:::{bar}

--------------------------------------------------------------------------------

(program
  (comment)
  (comment)
  (comment)
  (dollar
    lhs: (identifier))
  (braces
    body: (identifier))
  (at
    lhs: (identifier))
  (braces
    body: (identifier))
  (namespace
    lhs: (identifier))
  (braces
    body: (identifier))
  (namespace_internal
    lhs: (identifier))
  (braces
    body: (identifier)))

================================================================================
Assignment
================================================================================

x <- 1
x = 1
x := 1
x <<- 1
1 ->> x
1 -> x
x <- y(1)
y(1) -> x

--------------------------------------------------------------------------------

(program
  (left_assignment
    lhs: (identifier)
    rhs: (float))
  (equals_assignment
    lhs: (identifier)
    rhs: (float))
  (walrus_assignment
    lhs: (identifier)
    rhs: (float))
  (left_super_assignment
    lhs: (identifier)
    rhs: (float))
  (right_super_assignment
    lhs: (float)
    rhs: (identifier))
  (right_assignment
    lhs: (float)
    rhs: (identifier))
  (left_assignment
    lhs: (identifier)
    rhs: (call
      function: (identifier)
      arguments: (arguments
        argument: (argument
          value: (float)))))
  (right_assignment
    lhs: (call
      function: (identifier)
      arguments: (arguments
        argument: (argument
          value: (float))))
    rhs: (identifier)))

================================================================================
Calls
================================================================================

f()
f(x)
f(1+1)
f(1 ~ 1)
f(x, )
f(x,,y)
f(x, y)
f(x, y = 2)
f(x = 1 + 1)
f(x, y =)
f(f2(x, y))
f(,)
f(x,)
f(,y)
f(x=,)
f("x"=,)
f(... = ,)
f(,y=)

--------------------------------------------------------------------------------

(program
  (call
    function: (identifier)
    arguments: (arguments))
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))))
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        value: (arithmetic_operator
          lhs: (float)
          rhs: (float)))))
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        value: (tilde
          lhs: (float)
          rhs: (float)))))
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))
      (comma)))
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))
      (comma)
      (comma)
      argument: (argument
        value: (identifier))))
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))
      (comma)
      argument: (argument
        value: (identifier))))
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))
      (comma)
      argument: (argument
        name: (identifier)
        value: (float))))
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        name: (identifier)
        value: (arithmetic_operator
          lhs: (float)
          rhs: (float)))))
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))
      (comma)
      argument: (argument
        name: (identifier))))
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        value: (call
          function: (identifier)
          arguments: (arguments
            argument: (argument
              value: (identifier))
            (comma)
            argument: (argument
              value: (identifier)))))))
  (call
    function: (identifier)
    arguments: (arguments
      (comma)))
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        value: (identifier))
      (comma)))
  (call
    function: (identifier)
    arguments: (arguments
      (comma)
      argument: (argument
        value: (identifier))))
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        name: (identifier))
      (comma)))
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        name: (string))
      (comma)))
  (call
    function: (identifier)
    arguments: (arguments
      argument: (argument
        name: (dots))
      (comma)))
  (call
    function: (identifier)
    arguments: (arguments
      (comma)
      argument: (argument
        name: (identifier)))))

================================================================================
Braces
================================================================================

{}

{1}

{1; 2}

{1;
2}

{1
2
}

{
1
2
}

--------------------------------------------------------------------------------

(program
  (braces)
  (braces
    body: (float))
  (braces
    body: (float)
    body: (float))
  (braces
    body: (float)
    body: (float))
  (braces
    body: (float)
    body: (float))
  (braces
    body: (float)
    body: (float)))

================================================================================
Colon
================================================================================

1:2
(1 + 1):-5

--------------------------------------------------------------------------------

(program
  (colon
    lhs: (float)
    rhs: (float))
  (colon
    lhs: (parentheses
      body: (arithmetic_operator
        lhs: (float)
        rhs: (float)))
    rhs: (unary_operator
      rhs: (float))))

================================================================================
Formulas
================================================================================

~x
y~x

--------------------------------------------------------------------------------

(program
  (tilde
    rhs: (identifier))
  (tilde
    lhs: (identifier)
    rhs: (identifier)))

================================================================================
Help Operator
================================================================================
a ? b
a ? b <- 1
?a

--------------------------------------------------------------------------------

(program
  (help
    lhs: (identifier)
    rhs: (identifier))
  (help
    lhs: (identifier)
    rhs: (left_assignment
      lhs: (identifier)
      rhs: (float)))
  (help
    rhs: (identifier)))

================================================================================
Complex Expressions
================================================================================
repeat if (1) TRUE else repeat 42
if (TRUE) if (FALSE) 2 else NULL
a::b$c[[d]] <- e
TRUE ~ FALSE ~ NULL ? NA ? NaN
if (TRUE) FALSE
else NA
(if (TRUE) FALSE
else NA)
a = TRUE ? FALSE
TRUE <- FALSE = NA
TRUE <- FALSE ? NA
TRUE = FALSE ? NA
TRUE ? FALSE = NA

--------------------------------------------------------------------------------

(program
  (repeat_statement
    body: (if_statement
      condition: (float)
      consequence: (true)
      alternative: (repeat_statement
        body: (float))))
  (if_statement
    condition: (true)
    consequence: (if_statement
      condition: (false)
      consequence: (float)
      alternative: (null)))
  (left_assignment
    lhs: (subset2
      function: (dollar
        lhs: (namespace
          lhs: (identifier)
          rhs: (identifier))
        rhs: (identifier))
      arguments: (arguments
        argument: (argument
          value: (identifier))))
    rhs: (identifier))
  (help
    lhs: (help
      lhs: (tilde
        lhs: (tilde
          lhs: (true)
          rhs: (false))
        rhs: (null))
      rhs: (na))
    rhs: (nan))
  (if_statement
    condition: (true)
    consequence: (false))
  (identifier)
  (na)
  (parentheses
    body: (if_statement
      condition: (true)
      consequence: (false)
      alternative: (na)))
  (help
    lhs: (equals_assignment
      lhs: (identifier)
      rhs: (true))
    rhs: (false))
  (left_assignment
    lhs: (true)
    rhs: (equals_assignment
      lhs: (false)
      rhs: (na)))
  (help
    lhs: (left_assignment
      lhs: (true)
      rhs: (false))
    rhs: (na))
  (help
    lhs: (equals_assignment
      lhs: (true)
      rhs: (false))
    rhs: (na))
  (help
    lhs: (true)
    rhs: (equals_assignment
      lhs: (false)
      rhs: (na))))

================================================================================
Precedence Tests
================================================================================
A$"B"^NA
a::b$c
a$b?c

--------------------------------------------------------------------------------

(program
  (arithmetic_operator
    lhs: (dollar
      lhs: (identifier)
      rhs: (string))
    rhs: (na))
  (dollar
    lhs: (namespace
      lhs: (identifier)
      rhs: (identifier))
    rhs: (identifier))
  (help
    lhs: (dollar
      lhs: (identifier)
      rhs: (identifier))
    rhs: (identifier)))

================================================================================
Newlines
================================================================================

apple
(banana)

{
  apple
  (banana)
}

(
  apple
  (banana)
)

--------------------------------------------------------------------------------

(program
  (identifier)
  (parentheses
    body: (identifier))
  (braces
    body: (identifier)
    body: (parentheses
      body: (identifier)))
  (parentheses
    body: (call
      function: (identifier)
      arguments: (arguments
        argument: (argument
          value: (identifier))))))

================================================================================
Closing Brace
================================================================================

}

--------------------------------------------------------------------------------

(program
  (unmatched_closing_brace))

================================================================================
Closing Parenthesis
================================================================================

)

--------------------------------------------------------------------------------

(program
  (unmatched_closing_parenthesis))

================================================================================
Closing Bracket
================================================================================

]

--------------------------------------------------------------------------------

(program
  (unmatched_closing_bracket))

================================================================================
Opening Brace, Closing Parenthesis
================================================================================

# Parenthesis is "not valid" so it isn't matched by the external scanner, and
# instead falls through to the `)` rule in the grammar. 
{)

--------------------------------------------------------------------------------

(program
  (comment)
  (comment)
  (braces
    (unmatched_closing_parenthesis)
    (MISSING "}")))

================================================================================
Opening Parenthesis, Closing Brace
================================================================================

(}

--------------------------------------------------------------------------------

(program
  (parentheses
    (unmatched_closing_brace)
    (MISSING ")")))

================================================================================
Opening Parenthesis, Closing Bracket
================================================================================

(]

--------------------------------------------------------------------------------

(program
  (parentheses
    (unmatched_closing_bracket)
    (MISSING ")")))

================================================================================
Opening Bracket2, Unmatched Closing Bracket
================================================================================

x[[2]

--------------------------------------------------------------------------------

(program
  (subset2
    (identifier)
    (arguments
      (argument
        (float))
      (argument
        (unmatched_closing_bracket))
      (MISSING "]]"))))

================================================================================
Opening Bracket and Bracket2, Unmatched Closing Bracket
================================================================================

x[y[[2]

--------------------------------------------------------------------------------

(program
  (identifier)
  (ERROR
    (identifier)
    (argument
      (float))
    (argument
      (unmatched_closing_bracket))))

================================================================================
Opening Bracket2 and Bracket, Matched Closing Bracket
================================================================================

x[[y[2]

--------------------------------------------------------------------------------

(program
  (subset2
    function: (identifier)
    arguments: (arguments
      argument: (argument
        value: (subset
          function: (identifier)
          arguments: (arguments
            argument: (argument
              value: (float)))))
      (MISSING "]]"))))

================================================================================
Opening Bracket2 and Bracket, Unmatched Closing Bracket
================================================================================

x[[y[2]]

--------------------------------------------------------------------------------

(program
  (subset2
    function: (identifier)
    arguments: (arguments
      argument: (argument
        value: (subset
          function: (identifier)
          arguments: (arguments
            argument: (argument
              value: (float)))))
      argument: (argument
        value: (unmatched_closing_bracket))
      (MISSING "]]"))))
